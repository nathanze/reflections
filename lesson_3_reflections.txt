When would you want to use a remote repository rather than keeping all your work local?

I would use a remote repository to share my work with others, or to collaborate with others on a project.
I could also use it to work on the project from any device.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date 
with your remote repository?

To avoid the possibility of changes made to the remote files unexpectedly affecting my local files.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A clone copies a remote repository on a Github account onto your local system. A fork copies a respository from Github account
to another. A branch allows you to keep a master copy while you experiment with making changes on a new branch.
You use a fork to create a copy of someone's repository into your own account on Github. You clone that repository
when you download it to your local repository. You create a branch when you wish to maintain a master copy while 
trying something or making a change that you do not want to immediately appear on your master copy.

What is the benefit of having a copy of the last known state of the remote stored locally?

That way my computer can tell if the remote was changed since my last push or pull request. This helps to determine 
whether or not a fast-forward merge is possible.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would probably use Dropbox. It would be easier to not have to remember all of Git's commands, etc. However, 
it would be harder to keep track of the changes that each person makes, and it would be harder to merge files.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would make changes in a separate branch when I am collaborating with someone else, and need them to approve the changes.
Also, I would use a separate branch to develop a new feature that is not yet ready to go live. The benefits of making changes
in separate branches are that the bugs can be worked out of new features before they are added to the master working copy.
On the other hand, making changes directly in the master can be faster, especially if you are sure that changes won't hurt
anything.